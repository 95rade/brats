#!/usr/bin/env bash

set -eo pipefail

stack=lucid64
should_upload=true
host=""


usage() {
  echo "Usage: $0

  Options:
      [--language=LANGUAGE] # REQUIRED - Specifies the set of binaries to be tested.
                            # Possible values: ruby, python, go, nodejs, php
      [--stack=STACK]       # Specifies the stack that the test will run against.
                            # Default: lucid64
                            # Possible values: lucid64, cflinuxfs2
      [--no-upload]         # Specifies whether to upload local buildpack to cf. Overrides '--no-build' flag to true.
                            # Default: false"
  exit 1
}

indent() {
  echo -e "\n******* $1"
}

validate_stack_option() {
  if ([ "$stack" != "lucid64" ] && [ "$stack" != "cflinuxfs2" ]); then
    echo -e 'ERROR: Invalid argument passed in for --stack option. \n' \
      'The valid --stack options are [ "lucid64", "cflinuxfs2" ]'
    exit 1
  fi
}

configure_stack() {
  if [ "$host" == "" ]; then
    host=10.244.0.34.xip.io
    export VAGRANT_CWD="$HOME/workspace/bosh-lite"
    $VAGRANT_CWD/bin/add-route
  fi

  indent "Using the stack '$stack' against the host '$host'"
}

while [ "$#" -gt 0 ]; do
  case $1 in
    -h|-\?|--help|help)
        usage
        exit
        ;;
    --stack)
      if [ "$#" -gt 1 ]; then
        stack=$2
        validate_stack_option
        shift 2
        continue
      else
        echo 'ERROR: Must specify a non-empty "--stack STACK" argument.'
        exit 1
      fi
      ;;
    --language=*)
      if [ "$#" == "" ]; then
        usage
      else
        language=${1#*=}
      fi
      ;;
    --stack=*)
      stack=${1#*=}
      validate_stack_option
      ;;
    --host=*)
      host=${1#*=}
      ;;
    --no-upload)
      should_upload=false;;
    --)
      shift
      break
      ;;
    -?*)
      echo "Unrecognized option ($1) submitted"
      usage
      ;;
    *)
  esac
  shift
done


indent "Fetching CF CLI details"
cf api

# the script will package and upload an "offline"

upload_buildpack() {
  local name=$1
  pushd ~/workspace/$name-buildpack
    indent "Creating cached buildpack $name"
    pattern="*_buildpack-offline*.zip"
    rm -f $pattern
    BUNDLE_GEMFILE=cf.Gemfile time bundle exec buildpack-packager offline
    indent "Deleting previous buildpack"
    cf delete-buildpack $name-brat-buildpack -f
    indent "Uploading buildpack"
    cf create-buildpack $name-brat-buildpack $(ls $pattern | head -n 1) 100 --enable
  popd
}

if [ "$should_upload" == "true" ]; then
  upload_buildpack $language
fi

BUNDLE_GEMFILE=cf.Gemfile CF_STACK=$stack rspec -f documentation --color cf_spec/integration/"$language"_spec.rb $rspec_options
